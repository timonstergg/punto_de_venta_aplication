@page "/Cliente"
@using Venta.Shared.DTOs.DTOs;
@inject HttpClient Http;

<h3>Registrar Cliente</h3>

<EditForm Model="@clienteDTO" OnValidSubmit="GuardarCliente">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (clienteGuardadoExitosamente)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            Cliente agregado exitosamente.
            <button type="button" class="btn-close" @onclick="() => clienteGuardadoExitosamente = false" aria-label="Close"></button>
        </div>
    }
    <div class="mb-3">
        <label for="nombre" class="form-label">Nombre</label>
        <InputText id="nombre" class="form-control" @bind-Value="clienteDTO.Nombre" />
        <ValidationMessage For="@(() => clienteDTO.Nombre)" />
    </div>

    <div class="mb-3">
        <label for="documento" class="form-label">Documento</label>
        <InputText id="documento" class="form-control" @bind-Value="clienteDTO.Documento" />
        <ValidationMessage For="@(() => clienteDTO.Documento)" />
    </div>

    <div class="mb-3">
        <label for="telefono" class="form-label">Teléfono</label>
        <InputText id="telefono" class="form-control" @bind-Value="clienteDTO.Telefono" />
        <ValidationMessage For="@(() => clienteDTO.Telefono)" />
    </div>

    <div class="mb-3">
        <label for="direccion" class="form-label">Dirección</label>
        <InputText id="direccion" class="form-control" @bind-Value="clienteDTO.Direccion" />
        <ValidationMessage For="@(() => clienteDTO.Direccion)" />
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>
</EditForm>

@if (listaClientes.Any())
{
    <h4 class="mt-4">Clientes Registrados</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Documento</th>
                <th>Teléfono</th>
                <th>Dirección</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in listaClientes)
            {
                <tr>
                    <td>@c.Nombre</td>
                    <td>@c.Documento</td>
                    <td>@c.Telefono</td>
                    <td>@c.Direccion</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => EditarCliente(c)">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => EliminarCliente(c.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="text-muted mt-4">No hay clientes registrados.</p>
}


@code {
    private ClienteDTO clienteDTO = new();
    private string? errorMessage;
    private bool clienteGuardadoExitosamente = false;
    private List<ClienteDTO> listaClientes = new();

    private async Task GuardarCliente()
    {
        HttpResponseMessage response;

        if (clienteDTO.Id == 0)
            response = await Http.PostAsJsonAsync("api/Cliente", clienteDTO);
        else
            response = await Http.PutAsJsonAsync($"api/Cliente/{clienteDTO.Id}", clienteDTO);

        if (response.IsSuccessStatusCode)
        {
            await CargarClientes();
            clienteGuardadoExitosamente = true; // mostrar el mensaje
            LimpiarFormulario();
        }
        else
        {
            errorMessage = "Error al guardar el cliente.";
            clienteGuardadoExitosamente = false;
        }
    }

    private void LimpiarFormulario()
    {
        clienteDTO = new();
        errorMessage = null;
    }

    private async Task CargarClientes()
    {
        var response = await Http.GetAsync("api/Cliente");
        if (response.IsSuccessStatusCode)
        {
            listaClientes = await response.Content.ReadFromJsonAsync<List<ClienteDTO>>() ?? new();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
    }

    private void EditarCliente(ClienteDTO cliente)
    {
        clienteDTO = new ClienteDTO
            {
                Id = cliente.Id,
                Nombre = cliente.Nombre,
                Documento = cliente.Documento,
                Telefono = cliente.Telefono,
                Direccion = cliente.Direccion
            };
        clienteGuardadoExitosamente = false;
    }

    private async Task EliminarCliente(int id)
    {
        var response = await Http.DeleteAsync($"api/Cliente/{id}");
        if (response.IsSuccessStatusCode)
        {
            await CargarClientes();
        }
        else
        {
            errorMessage = "Error al eliminar el cliente.";
        }
    }
}